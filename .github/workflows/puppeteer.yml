name: Screenshot and generate video
description: Take screenshots and generate a video of the Next.js app using Puppeteer

on: [push, pull_request]

jobs:
  screenshot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ash-portfolio/package-lock.json
      
      - name: Install dependencies
        working-directory: ./ash-portfolio
        run: |
          npm install
            
      - name: Build Next.js app
        working-directory: ./ash-portfolio
        run: npm run build

      - name: Start Next.js app
        working-directory: ./ash-portfolio
        run: npm run start &

      - name: Take visual records of current app
        uses: ashfordhill/puppeteer-action@v3
        with:
          url: 'http://localhost:3000'
          folder: 'timeline'
          basename: 'screenshot'
          make_video: 'true'
          video_name: timeline.mp4
          frame_duration: '1'
          scale_width: '640'

      - name: Upload/overwrite video in fixed release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VIDEO_PATH: timeline/timeline.mp4
          RELEASE_TAG: video-asset
          RELEASE_NAME: "README Video Asset"
          ASSET_NAME: timeline.mp4
        run: |
          set -e
      
          # Look up release by tag
          RELEASE_ID=$(curl -s \
            -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${RELEASE_TAG}" \
            | jq -r .id)
      
          if [ "$RELEASE_ID" = "null" ]; then
            echo "Release not found, creating one..."
            RELEASE_ID=$(curl -s \
              -H "Authorization: token $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\": \"$RELEASE_TAG\", \"name\": \"$RELEASE_NAME\", \"draft\": true}" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
              | jq -r .id)
          fi
      
          # Delete existing asset with the same name (if exists)
          ASSET_ID=$(curl -s \
            -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets" \
            | jq -r ".[] | select(.name==\"$ASSET_NAME\") | .id")
      
          if [ -n "$ASSET_ID" ]; then
            echo "Deleting old asset..."
            curl -s -X DELETE \
              -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/assets/${ASSET_ID}"
          fi
      
          echo "Uploading new asset..."
          UPLOAD_RESPONSE=$(curl -s \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: video/mp4" \
            --data-binary @"$VIDEO_PATH" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ASSET_NAME}")
      
          ASSET_URL=$(echo "$UPLOAD_RESPONSE" | jq -r .browser_download_url)
      
          echo "âœ… Video uploaded to: $ASSET_URL"
          echo ""
          echo "ðŸ“Œ Use this in your README:"
          echo "<video src=\"$ASSET_URL\" controls></video>"

      - name: Commit screenshot
        working-directory: ./ash-portfolio
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add -A
          git commit -m "[ACTION] Add screenshots"
          git push origin HEAD:${{ github.ref }}
