name: Screenshot and GIF Generator

on:
  # Run on push to main branch
  push:
    branches: [ main ]
  
  # Run on pull requests
  pull_request:
    branches: [ main ]
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run on a schedule (once a day at midnight UTC)
  schedule:
    - cron: '0 0 * * *'

jobs:
  screenshot-and-gif:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper timestamps
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ash-portfolio/package-lock.json
      
      - name: Install dependencies
        run: |
          cd ash-portfolio
          npm ci
      
      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      
      - name: Install screenshot and GIF tools
        run: |
          npm install -g puppeteer gifski
          mkdir -p images
      
      - name: Start Next.js app and take screenshot
        run: |
          # Start the Next.js app in the background
          cd ash-portfolio
          npm run dev &
          
          # Wait for the app to start
          sleep 10
          
          # Create a timestamp for the screenshot
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          # Create a Node.js script to take a screenshot
          cat > take-screenshot.js << 'EOL'
          const puppeteer = require('puppeteer');
          
          (async () => {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            
            // Set viewport to 1280x720
            await page.setViewport({ width: 1280, height: 720 });
            
            // Navigate to the app
            await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
            
            // Wait for any animations or content to load
            await page.waitForTimeout(2000);
            
            // Take screenshot
            await page.screenshot({ 
              path: `../images/screenshot_${process.env.TIMESTAMP}.png`,
              clip: {
                x: 0,
                y: 0,
                width: 1000,
                height: 1000
              }
            });
            
            await browser.close();
            console.log('Screenshot taken successfully!');
          })();
          EOL
          
          # Run the screenshot script
          TIMESTAMP=$TIMESTAMP node take-screenshot.js
          
          # Kill the Next.js process
          kill $(lsof -t -i:3000) || true
      
      - name: Generate GIF from screenshots
        run: |
          # Check if we have at least one screenshot
          if [ "$(ls -A images/*.png 2>/dev/null)" ]; then
            # Sort screenshots by name (which includes timestamp)
            SCREENSHOTS=$(ls -t images/*.png | sort)
            
            # Generate GIF using gifski
            gifski --fps 2 --width 500 --height 500 --quality 80 -o pathfinder-progress.gif $SCREENSHOTS
            
            # Move the GIF to the images directory
            mv pathfinder-progress.gif images/
            
            echo "GIF generated successfully!"
          else
            echo "No screenshots found to generate GIF."
          fi
      
      - name: Update README with latest GIF
        run: |
          # Check if GIF exists
          if [ -f "images/pathfinder-progress.gif" ]; then
            # Create or update README.md with the GIF
            if [ -f "README.md" ]; then
              # Check if README already has a GIF section
              if grep -q "## Pathfinder Progress" README.md; then
                # Replace the existing GIF section
                sed -i '/## Pathfinder Progress/,/!\[Pathfinder Progress\]/c\## Pathfinder Progress\n\n![Pathfinder Progress](images/pathfinder-progress.gif)' README.md
              else
                # Add GIF section at the end
                echo -e "\n## Pathfinder Progress\n\n![Pathfinder Progress](images/pathfinder-progress.gif)" >> README.md
              fi
            else
              # Create a new README with the GIF
              echo -e "# Pathfinding Visualizer\n\n## Pathfinder Progress\n\n![Pathfinder Progress](images/pathfinder-progress.gif)" > README.md
            fi
            echo "README updated with latest GIF!"
          else
            echo "No GIF found to update README."
          fi
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add images/ README.md
          git commit -m "Update screenshots and progress GIF" || echo "No changes to commit"
          git push